name: Monthly builds esm

on:
  schedule:
    - cron: '0 0 1 * *'
  push:
    tags:
      - '*'
    branches:
      - main
    paths-ignore:
      - .github/worflows/promote-snaps.yaml
      - .github/worflows/keep_alive.yaml
      - README.md
      - .gitignore
  pull_request:
    branches:
      - main
    paths-ignore:
      - .github/worflows/promote-snaps.yaml
      - .github/worflows/keep_alive.yaml
      - README.md
      - .gitignore
  workflow_dispatch:

concurrency:
  group: builds-esm-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true


jobs:
  generate-snapcrafts:
    name: Generate snapcraft.yaml files
    runs-on: [ubuntu-latest]
    outputs:
      matrix: ${{ steps.generate.outputs.matrix }}
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v6
        with:
          python-version: '3.13'
      - name: Generate snapacraft yaml files for all ros distros
        id: generate
        run: |
          pip install .
          python3 ./generate_all_ros_esm_meta_snapcraft_file.py
          matrix_json=$(jq -nc '{include: [inputs]}' < <(
          for dir in snaps/*; do
            [ -f "$dir/snapcraft.yaml" ] || continue
            snap_name=$(basename "$dir")

            # Extract the first build-on architecture
            arch=$(yq e '.architectures[]."build-on"' "$dir/snapcraft.yaml" | head -n1)

            if [ "$arch" = "arm64" ]; then
              runner='["self-hosted","linux","ARM64","large","noble"]'
            else
              runner='["self-hosted","linux","X64","large","noble"]'
            fi

            jq -nc --arg name "$snap_name" --argjson runner "$runner" \
              '{snap_name: $name, runner: $runner}'
          done
          ))
          echo "matrix=$matrix_json" >> $GITHUB_OUTPUT
      - name: Upload snapcrafts folders
        uses: actions/upload-artifact@v4
        with:
          name: snapcraft_yamls
          path: snaps/

  snap-build:
    name: Build ROS ESM snaps
    needs: generate-snapcrafts
    strategy:
        fail-fast: false
        matrix: ${{ fromJSON(needs.generate-snapcrafts.outputs.matrix) }}
    runs-on: ${{ matrix.runner }}
    steps:
      - name: Download snapcrafts folders
        uses: actions/download-artifact@v5
        with:
          name: snapcraft_yamls
      - name: Print snapcraft.yaml
        run: |
          cat /home/ubuntu/actions-runner/_work/ros-content-sharing-snaps/ros-content-sharing-snaps/${{ matrix.snap_name }}/snapcraft.yaml
      - name: Setup LXD
        uses: canonical/setup-lxd@main
      - name: Launch an LXD container
        run: |
          lxc launch ubuntu:20.04 lxc-container
          lxc exec lxc-container -- cloud-init status --wait
          until lxc exec lxc-container -- getent passwd ubuntu; do
            echo "Waiting for the ubuntu user."
            sleep 0.25
          done
      - name: Push the snap folder to the container
        run: |
          lxc file push -r /home/ubuntu/actions-runner/_work/ros-content-sharing-snaps/ros-content-sharing-snaps/${{ matrix.snap_name }}/ lxc-container/home/ubuntu/
      - name: Enable Ubuntu Pro
        env:
          PRO_TOKEN: ${{ secrets.PRO_TOKEN }}
        run: |
          lxc exec lxc-container -- bash -c "sudo apt update && sudo apt install -y ubuntu-pro-client"
          lxc exec lxc-container -- bash -c "export PRO_TOKEN='$PRO_TOKEN'; sudo pro attach $PRO_TOKEN"
          lxc exec lxc-container -- sudo pro enable ros
      - name: Run snapcraft
        run: |
          lxc exec lxc-container -- sudo snap install snapcraft --classic
          lxc exec lxc-container -- bash -c "cd ${{ matrix.snap_name }} && sudo snapcraft --destructive-mode"
      - name: Pull snap artifact out of the container
        run:
          lxc file pull lxc-container/home/ubuntu/*.snap /home/ubuntu/actions-runner/_work/ros-content-sharing-snaps/ros-content-sharing-snaps/${{ matrix.snap_name }}/
      - name: Upload the snap as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.snap_name }}
          path: /home/ubuntu/actions-runner/_work/ros-content-sharing-snaps/ros-content-sharing-snaps/${{ matrix.snap_name }}/*.snap

  ros-publish:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [generate-snapcrafts, snap-build]
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.generate-snapcrafts.outputs.matrix) }}
    steps:
    - uses: actions/download-artifact@v5
      with:
        name: ${{ matrix.snap_name }}
        path: .
    - name: Get snap filename
      run: echo "SNAPFILE=$(ls *.snap)" >> $GITHUB_ENV
    - uses: snapcore/action-publish@v1
      env:
        SNAPCRAFT_STORE_CREDENTIALS: ${{ secrets.STORE_LOGIN }}
      with:
        snap: ${{ env.SNAPFILE }}
        release: beta
